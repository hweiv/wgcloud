package com.wgcloud;

import cn.hutool.json.JSONUtil;
import com.wgcloud.thread.ClientHeartThread;
import com.wgcloud.thread.ClientPrintThread;
import com.wgcloud.thread.ClientSocketThread;
import com.wgcloud.upan.Client;
import lombok.extern.slf4j.Slf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Component;

import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;

@Component
public class ClientSocketConfig {

    private static Logger log = LoggerFactory.getLogger(ClientSocketConfig.class);

    // 存放磁盘状态
    private static Map<String, Boolean> map = new LinkedHashMap<String, Boolean>();
    // 定义磁盘
    private static final String[] arr = new String[]{"C", "D", "E", "F", "G", "H", "I", "J", "U"};

    @Value("${target.service.host}")
    private String host;

    @Value("${target.service.port}")
    private Integer port;

    public static ServerSocket serverSocket = null;

    private static final ThreadPoolExecutor threadpool = new ThreadPoolExecutor(15, 15,
            10L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());

    @Bean
    public void socketClientCreate() {

//        try {
//            serverSocket = new ServerSocket(5030);
//            Socket socketHeart = new Socket(host, port);
//            log.info("socket客户端开启");
//            while (true){
//                Socket socket = serverSocket.accept();
//                System.out.println("接收到客户端socket" + socket.getRemoteSocketAddress());
//                threadpool.execute(new ClientHeartThread(host, port));
//                threadpool.execute(new ClientPrintThread(host, port));
                threadpool.execute(new ClientSocketThread(host, port));
//            }
//        } catch (IOException e) {
//            log.info("socket服务启动异常");
//            e.printStackTrace();
//        }
    }
}

